// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/channel/channel.v1.proto

package channel

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChannelRequestMultiError, or nil if none found.
func (m *DeleteChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteChannelRequestMultiError(errors)
	}

	return nil
}

// DeleteChannelRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChannelRequestMultiError) AllErrors() []error { return m }

// DeleteChannelRequestValidationError is the validation error returned by
// DeleteChannelRequest.Validate if the designated constraints aren't met.
type DeleteChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelRequestValidationError) ErrorName() string {
	return "DeleteChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelRequestValidationError{}

// Validate checks the field values on DeleteChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteChannelReplyMultiError, or nil if none found.
func (m *DeleteChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteChannelReplyMultiError(errors)
	}

	return nil
}

// DeleteChannelReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteChannelReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteChannelReplyMultiError) AllErrors() []error { return m }

// DeleteChannelReplyValidationError is the validation error returned by
// DeleteChannelReply.Validate if the designated constraints aren't met.
type DeleteChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteChannelReplyValidationError) ErrorName() string {
	return "DeleteChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteChannelReplyValidationError{}

// Validate checks the field values on UpdateChannelBatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelBatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelBatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelBatchRequestMultiError, or nil if none found.
func (m *UpdateChannelBatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelBatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Use

	for idx, item := range m.GetContactPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateChannelBatchRequestValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateChannelBatchRequestValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateChannelBatchRequestValidationError{
					field:  fmt.Sprintf("ContactPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCustomItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateChannelBatchRequestValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateChannelBatchRequestValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateChannelBatchRequestValidationError{
					field:  fmt.Sprintf("CustomItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateChannelBatchRequestMultiError(errors)
	}

	return nil
}

// UpdateChannelBatchRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelBatchRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateChannelBatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelBatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelBatchRequestMultiError) AllErrors() []error { return m }

// UpdateChannelBatchRequestValidationError is the validation error returned by
// UpdateChannelBatchRequest.Validate if the designated constraints aren't met.
type UpdateChannelBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelBatchRequestValidationError) ErrorName() string {
	return "UpdateChannelBatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelBatchRequestValidationError{}

// Validate checks the field values on UpdateChannelBatchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelBatchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelBatchReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelBatchReplyMultiError, or nil if none found.
func (m *UpdateChannelBatchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelBatchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateChannelBatchReplyMultiError(errors)
	}

	return nil
}

// UpdateChannelBatchReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelBatchReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateChannelBatchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelBatchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelBatchReplyMultiError) AllErrors() []error { return m }

// UpdateChannelBatchReplyValidationError is the validation error returned by
// UpdateChannelBatchReply.Validate if the designated constraints aren't met.
type UpdateChannelBatchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelBatchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelBatchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelBatchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelBatchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelBatchReplyValidationError) ErrorName() string {
	return "UpdateChannelBatchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelBatchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelBatchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelBatchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelBatchReplyValidationError{}

// Validate checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelRequestMultiError, or nil if none found.
func (m *UpdateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Use

	for idx, item := range m.GetContactPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateChannelRequestValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateChannelRequestValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateChannelRequestValidationError{
					field:  fmt.Sprintf("ContactPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCustomItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateChannelRequestValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateChannelRequestValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateChannelRequestValidationError{
					field:  fmt.Sprintf("CustomItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateChannelRequestMultiError(errors)
	}

	return nil
}

// UpdateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelRequestMultiError) AllErrors() []error { return m }

// UpdateChannelRequestValidationError is the validation error returned by
// UpdateChannelRequest.Validate if the designated constraints aren't met.
type UpdateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelRequestValidationError) ErrorName() string {
	return "UpdateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelRequestValidationError{}

// Validate checks the field values on UpdateChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateChannelReplyMultiError, or nil if none found.
func (m *UpdateChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateChannelReplyMultiError(errors)
	}

	return nil
}

// UpdateChannelReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateChannelReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateChannelReplyMultiError) AllErrors() []error { return m }

// UpdateChannelReplyValidationError is the validation error returned by
// UpdateChannelReply.Validate if the designated constraints aren't met.
type UpdateChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateChannelReplyValidationError) ErrorName() string {
	return "UpdateChannelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateChannelReplyValidationError{}

// Validate checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateChannelRequestMultiError, or nil if none found.
func (m *CreateChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Use

	for idx, item := range m.GetContactPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateChannelRequestValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateChannelRequestValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateChannelRequestValidationError{
					field:  fmt.Sprintf("ContactPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCustomItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateChannelRequestValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateChannelRequestValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateChannelRequestValidationError{
					field:  fmt.Sprintf("CustomItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateChannelRequestMultiError(errors)
	}

	return nil
}

// CreateChannelRequestMultiError is an error wrapping multiple validation
// errors returned by CreateChannelRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateChannelRequestMultiError) AllErrors() []error { return m }

// CreateChannelRequestValidationError is the validation error returned by
// CreateChannelRequest.Validate if the designated constraints aren't met.
type CreateChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateChannelRequestValidationError) ErrorName() string {
	return "CreateChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateChannelRequestValidationError{}

// Validate checks the field values on GetChannelRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetChannelRequestMultiError, or nil if none found.
func (m *GetChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetChannelRequestMultiError(errors)
	}

	return nil
}

// GetChannelRequestMultiError is an error wrapping multiple validation errors
// returned by GetChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type GetChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetChannelRequestMultiError) AllErrors() []error { return m }

// GetChannelRequestValidationError is the validation error returned by
// GetChannelRequest.Validate if the designated constraints aren't met.
type GetChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetChannelRequestValidationError) ErrorName() string {
	return "GetChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetChannelRequestValidationError{}

// Validate checks the field values on ListChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListChannelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelRequestMultiError, or nil if none found.
func (m *ListChannelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for Order

	// no validation rules for SearchText

	// no validation rules for SearchField

	// no validation rules for Field

	// no validation rules for Cache

	if all {
		switch v := interface{}(m.GetFilterMap()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListChannelRequestValidationError{
					field:  "FilterMap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListChannelRequestValidationError{
					field:  "FilterMap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterMap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListChannelRequestValidationError{
				field:  "FilterMap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListChannelRequestMultiError(errors)
	}

	return nil
}

// ListChannelRequestMultiError is an error wrapping multiple validation errors
// returned by ListChannelRequest.ValidateAll() if the designated constraints
// aren't met.
type ListChannelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelRequestMultiError) AllErrors() []error { return m }

// ListChannelRequestValidationError is the validation error returned by
// ListChannelRequest.Validate if the designated constraints aren't met.
type ListChannelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelRequestValidationError) ErrorName() string {
	return "ListChannelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListChannelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelRequestValidationError{}

// Validate checks the field values on ListChannelReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListChannelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListChannelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListChannelReplyMultiError, or nil if none found.
func (m *ListChannelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListChannelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListChannelReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListChannelReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListChannelReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListChannelReplyMultiError(errors)
	}

	return nil
}

// ListChannelReplyMultiError is an error wrapping multiple validation errors
// returned by ListChannelReply.ValidateAll() if the designated constraints
// aren't met.
type ListChannelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListChannelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListChannelReplyMultiError) AllErrors() []error { return m }

// ListChannelReplyValidationError is the validation error returned by
// ListChannelReply.Validate if the designated constraints aren't met.
type ListChannelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListChannelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListChannelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListChannelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListChannelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListChannelReplyValidationError) ErrorName() string { return "ListChannelReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListChannelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListChannelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListChannelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListChannelReplyValidationError{}

// Validate checks the field values on AlertWebhookDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertWebhookDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertWebhookDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertWebhookDTOMultiError, or nil if none found.
func (m *AlertWebhookDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertWebhookDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	// no validation rules for Alias

	// no validation rules for Mode

	if len(errors) > 0 {
		return AlertWebhookDTOMultiError(errors)
	}

	return nil
}

// AlertWebhookDTOMultiError is an error wrapping multiple validation errors
// returned by AlertWebhookDTO.ValidateAll() if the designated constraints
// aren't met.
type AlertWebhookDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertWebhookDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertWebhookDTOMultiError) AllErrors() []error { return m }

// AlertWebhookDTOValidationError is the validation error returned by
// AlertWebhookDTO.Validate if the designated constraints aren't met.
type AlertWebhookDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertWebhookDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertWebhookDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertWebhookDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertWebhookDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertWebhookDTOValidationError) ErrorName() string { return "AlertWebhookDTOValidationError" }

// Error satisfies the builtin error interface
func (e AlertWebhookDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertWebhookDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertWebhookDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertWebhookDTOValidationError{}

// Validate checks the field values on ContactPointDTO with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ContactPointDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContactPointDTO with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ContactPointDTOMultiError, or nil if none found.
func (m *ContactPointDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ContactPointDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Type

	// no validation rules for ChannelId

	// no validation rules for TplId

	// no validation rules for Webhook

	// no validation rules for Secret

	// no validation rules for SeverityDesc

	// no validation rules for Show

	// no validation rules for Fixed

	for idx, item := range m.GetAlertWebhooks() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ContactPointDTOValidationError{
						field:  fmt.Sprintf("AlertWebhooks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ContactPointDTOValidationError{
						field:  fmt.Sprintf("AlertWebhooks[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ContactPointDTOValidationError{
					field:  fmt.Sprintf("AlertWebhooks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ContactPointDTOMultiError(errors)
	}

	return nil
}

// ContactPointDTOMultiError is an error wrapping multiple validation errors
// returned by ContactPointDTO.ValidateAll() if the designated constraints
// aren't met.
type ContactPointDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContactPointDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContactPointDTOMultiError) AllErrors() []error { return m }

// ContactPointDTOValidationError is the validation error returned by
// ContactPointDTO.Validate if the designated constraints aren't met.
type ContactPointDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContactPointDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContactPointDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContactPointDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContactPointDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContactPointDTOValidationError) ErrorName() string { return "ContactPointDTOValidationError" }

// Error satisfies the builtin error interface
func (e ContactPointDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContactPointDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContactPointDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContactPointDTOValidationError{}

// Validate checks the field values on ChannelDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ChannelDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelDTOMultiError, or
// nil if none found.
func (m *ChannelDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	// no validation rules for Name

	// no validation rules for Use

	for idx, item := range m.GetContactPoints() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelDTOValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelDTOValidationError{
						field:  fmt.Sprintf("ContactPoints[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelDTOValidationError{
					field:  fmt.Sprintf("ContactPoints[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetCustomItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelDTOValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelDTOValidationError{
						field:  fmt.Sprintf("CustomItems[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelDTOValidationError{
					field:  fmt.Sprintf("CustomItems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for DefaultRule

	if len(errors) > 0 {
		return ChannelDTOMultiError(errors)
	}

	return nil
}

// ChannelDTOMultiError is an error wrapping multiple validation errors
// returned by ChannelDTO.ValidateAll() if the designated constraints aren't met.
type ChannelDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelDTOMultiError) AllErrors() []error { return m }

// ChannelDTOValidationError is the validation error returned by
// ChannelDTO.Validate if the designated constraints aren't met.
type ChannelDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelDTOValidationError) ErrorName() string { return "ChannelDTOValidationError" }

// Error satisfies the builtin error interface
func (e ChannelDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelDTOValidationError{}
