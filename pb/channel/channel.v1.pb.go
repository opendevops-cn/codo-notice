// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v5.27.1
// source: pb/channel/channel.v1.proto

package channel

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/Ccheers/protoc-gen-go-kratos-http/khttp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AlertWebhookDTO_AlertCallbackMode int32

const (
	// AlertCallbackModeNone 无情景
	AlertWebhookDTO_AlertCallbackModeNone AlertWebhookDTO_AlertCallbackMode = 0
	// AlertCallbackModeIsApprove 强调同意
	AlertWebhookDTO_AlertCallbackModeIsApprove AlertWebhookDTO_AlertCallbackMode = 1
	// AlertCallbackModeIsReject 强调拒绝
	AlertWebhookDTO_AlertCallbackModeIsReject AlertWebhookDTO_AlertCallbackMode = 2
)

// Enum value maps for AlertWebhookDTO_AlertCallbackMode.
var (
	AlertWebhookDTO_AlertCallbackMode_name = map[int32]string{
		0: "AlertCallbackModeNone",
		1: "AlertCallbackModeIsApprove",
		2: "AlertCallbackModeIsReject",
	}
	AlertWebhookDTO_AlertCallbackMode_value = map[string]int32{
		"AlertCallbackModeNone":      0,
		"AlertCallbackModeIsApprove": 1,
		"AlertCallbackModeIsReject":  2,
	}
)

func (x AlertWebhookDTO_AlertCallbackMode) Enum() *AlertWebhookDTO_AlertCallbackMode {
	p := new(AlertWebhookDTO_AlertCallbackMode)
	*p = x
	return p
}

func (x AlertWebhookDTO_AlertCallbackMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlertWebhookDTO_AlertCallbackMode) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_channel_channel_v1_proto_enumTypes[0].Descriptor()
}

func (AlertWebhookDTO_AlertCallbackMode) Type() protoreflect.EnumType {
	return &file_pb_channel_channel_v1_proto_enumTypes[0]
}

func (x AlertWebhookDTO_AlertCallbackMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlertWebhookDTO_AlertCallbackMode.Descriptor instead.
func (AlertWebhookDTO_AlertCallbackMode) EnumDescriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{10, 0}
}

type DeleteChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids []uint32 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (x *DeleteChannelRequest) Reset() {
	*x = DeleteChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelRequest) ProtoMessage() {}

func (x *DeleteChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelRequest.ProtoReflect.Descriptor instead.
func (*DeleteChannelRequest) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{0}
}

func (x *DeleteChannelRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type DeleteChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteChannelReply) Reset() {
	*x = DeleteChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelReply) ProtoMessage() {}

func (x *DeleteChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelReply.ProtoReflect.Descriptor instead.
func (*DeleteChannelReply) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{1}
}

type UpdateChannelBatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ids           []uint32           `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Use           string             `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	User          []string           `protobuf:"bytes,4,rep,name=user,proto3" json:"user,omitempty"`
	ContactPoints []*ContactPointDTO `protobuf:"bytes,5,rep,name=contact_points,json=contactPoints,proto3" json:"contact_points,omitempty"`
	CustomItems   []*ContactPointDTO `protobuf:"bytes,6,rep,name=custom_items,json=customItems,proto3" json:"custom_items,omitempty"`
}

func (x *UpdateChannelBatchRequest) Reset() {
	*x = UpdateChannelBatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelBatchRequest) ProtoMessage() {}

func (x *UpdateChannelBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelBatchRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelBatchRequest) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateChannelBatchRequest) GetIds() []uint32 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *UpdateChannelBatchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateChannelBatchRequest) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *UpdateChannelBatchRequest) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateChannelBatchRequest) GetContactPoints() []*ContactPointDTO {
	if x != nil {
		return x.ContactPoints
	}
	return nil
}

func (x *UpdateChannelBatchRequest) GetCustomItems() []*ContactPointDTO {
	if x != nil {
		return x.CustomItems
	}
	return nil
}

type UpdateChannelBatchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateChannelBatchReply) Reset() {
	*x = UpdateChannelBatchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelBatchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelBatchReply) ProtoMessage() {}

func (x *UpdateChannelBatchReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelBatchReply.ProtoReflect.Descriptor instead.
func (*UpdateChannelBatchReply) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{3}
}

type UpdateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint32             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Use           string             `protobuf:"bytes,3,opt,name=use,proto3" json:"use,omitempty"`
	User          []string           `protobuf:"bytes,4,rep,name=user,proto3" json:"user,omitempty"`
	ContactPoints []*ContactPointDTO `protobuf:"bytes,5,rep,name=contact_points,json=contactPoints,proto3" json:"contact_points,omitempty"`
	CustomItems   []*ContactPointDTO `protobuf:"bytes,6,rep,name=custom_items,json=customItems,proto3" json:"custom_items,omitempty"`
}

func (x *UpdateChannelRequest) Reset() {
	*x = UpdateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelRequest) ProtoMessage() {}

func (x *UpdateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelRequest) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateChannelRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateChannelRequest) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *UpdateChannelRequest) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UpdateChannelRequest) GetContactPoints() []*ContactPointDTO {
	if x != nil {
		return x.ContactPoints
	}
	return nil
}

func (x *UpdateChannelRequest) GetCustomItems() []*ContactPointDTO {
	if x != nil {
		return x.CustomItems
	}
	return nil
}

type UpdateChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateChannelReply) Reset() {
	*x = UpdateChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelReply) ProtoMessage() {}

func (x *UpdateChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelReply.ProtoReflect.Descriptor instead.
func (*UpdateChannelReply) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{5}
}

type CreateChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Use           string             `protobuf:"bytes,2,opt,name=use,proto3" json:"use,omitempty"`
	User          []string           `protobuf:"bytes,3,rep,name=user,proto3" json:"user,omitempty"`
	ContactPoints []*ContactPointDTO `protobuf:"bytes,4,rep,name=contact_points,json=contactPoints,proto3" json:"contact_points,omitempty"`
	CustomItems   []*ContactPointDTO `protobuf:"bytes,5,rep,name=custom_items,json=customItems,proto3" json:"custom_items,omitempty"`
}

func (x *CreateChannelRequest) Reset() {
	*x = CreateChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChannelRequest) ProtoMessage() {}

func (x *CreateChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChannelRequest.ProtoReflect.Descriptor instead.
func (*CreateChannelRequest) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{6}
}

func (x *CreateChannelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChannelRequest) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *CreateChannelRequest) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CreateChannelRequest) GetContactPoints() []*ContactPointDTO {
	if x != nil {
		return x.ContactPoints
	}
	return nil
}

func (x *CreateChannelRequest) GetCustomItems() []*ContactPointDTO {
	if x != nil {
		return x.CustomItems
	}
	return nil
}

type GetChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetChannelRequest) Reset() {
	*x = GetChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRequest) ProtoMessage() {}

func (x *GetChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRequest.ProtoReflect.Descriptor instead.
func (*GetChannelRequest) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{7}
}

func (x *GetChannelRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 每页条数
	PageSize int32 `protobuf:"varint,1,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	// 第几页
	PageNum int32 `protobuf:"varint,2,opt,name=pageNum,proto3" json:"pageNum,omitempty"`
	// 正序或倒序 ascend  descend
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// 全局搜索关键字
	SearchText string `protobuf:"bytes,4,opt,name=searchText,proto3" json:"searchText,omitempty"`
	// 搜索字段
	SearchField string `protobuf:"bytes,5,opt,name=searchField,proto3" json:"searchField,omitempty"`
	// 排序关键字
	Field string `protobuf:"bytes,6,opt,name=field,proto3" json:"field,omitempty"`
	// yes:缓存，no:不缓存
	Cache string `protobuf:"bytes,7,opt,name=cache,proto3" json:"cache,omitempty"`
	// 多字段搜索,精准匹配
	FilterMap *structpb.Struct `protobuf:"bytes,8,opt,name=filter_map,json=filterMap,proto3" json:"filter_map,omitempty"`
}

func (x *ListChannelRequest) Reset() {
	*x = ListChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelRequest) ProtoMessage() {}

func (x *ListChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelRequest.ProtoReflect.Descriptor instead.
func (*ListChannelRequest) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{8}
}

func (x *ListChannelRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListChannelRequest) GetPageNum() int32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListChannelRequest) GetOrder() string {
	if x != nil {
		return x.Order
	}
	return ""
}

func (x *ListChannelRequest) GetSearchText() string {
	if x != nil {
		return x.SearchText
	}
	return ""
}

func (x *ListChannelRequest) GetSearchField() string {
	if x != nil {
		return x.SearchField
	}
	return ""
}

func (x *ListChannelRequest) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *ListChannelRequest) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *ListChannelRequest) GetFilterMap() *structpb.Struct {
	if x != nil {
		return x.FilterMap
	}
	return nil
}

type ListChannelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 列表
	Data []*ChannelDTO `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	// 总数
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *ListChannelReply) Reset() {
	*x = ListChannelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListChannelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListChannelReply) ProtoMessage() {}

func (x *ListChannelReply) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListChannelReply.ProtoReflect.Descriptor instead.
func (*ListChannelReply) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{9}
}

func (x *ListChannelReply) GetData() []*ChannelDTO {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListChannelReply) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AlertWebhookDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// URL
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// 别名
	Alias string `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	// 情景模式
	Mode AlertWebhookDTO_AlertCallbackMode `protobuf:"varint,3,opt,name=mode,proto3,enum=ops.codo.notice.channel.v1.AlertWebhookDTO_AlertCallbackMode" json:"mode,omitempty"`
}

func (x *AlertWebhookDTO) Reset() {
	*x = AlertWebhookDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertWebhookDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertWebhookDTO) ProtoMessage() {}

func (x *AlertWebhookDTO) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertWebhookDTO.ProtoReflect.Descriptor instead.
func (*AlertWebhookDTO) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{10}
}

func (x *AlertWebhookDTO) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AlertWebhookDTO) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *AlertWebhookDTO) GetMode() AlertWebhookDTO_AlertCallbackMode {
	if x != nil {
		return x.Mode
	}
	return AlertWebhookDTO_AlertCallbackModeNone
}

// ContactPoint 联系点定义
type ContactPointDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID 主键
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时间
	CreatedAt string `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt string `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// 类型，不为空，默认值为"default"，最大长度16
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	// 通道ID
	ChannelId uint32 `protobuf:"varint,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// 模板ID
	TplId uint32 `protobuf:"varint,6,opt,name=tpl_id,json=tplId,proto3" json:"tpl_id,omitempty"`
	// 地址，最大长度1024
	Webhook string `protobuf:"bytes,7,opt,name=webhook,proto3" json:"webhook,omitempty"`
	// 密钥，最大长度1024
	Secret string `protobuf:"bytes,8,opt,name=secret,proto3" json:"secret,omitempty"`
	// 等级列表
	Severity []string `protobuf:"bytes,9,rep,name=severity,proto3" json:"severity,omitempty"`
	// 等级描述，最大长度1024
	SeverityDesc string `protobuf:"bytes,10,opt,name=severity_desc,json=severityDesc,proto3" json:"severity_desc,omitempty"`
	// 是否显示，可选值："yes"/"no"，默认值为"no"，最大长度16
	Show string `protobuf:"bytes,11,opt,name=show,proto3" json:"show,omitempty"`
	// 是否固定，可选值："yes"/"no"，默认值为"yes"，最大长度16
	Fixed string `protobuf:"bytes,12,opt,name=fixed,proto3" json:"fixed,omitempty"`
	// 通知回调
	AlertWebhooks []*AlertWebhookDTO `protobuf:"bytes,13,rep,name=alert_webhooks,json=alertWebhooks,proto3" json:"alert_webhooks,omitempty"`
}

func (x *ContactPointDTO) Reset() {
	*x = ContactPointDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactPointDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactPointDTO) ProtoMessage() {}

func (x *ContactPointDTO) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactPointDTO.ProtoReflect.Descriptor instead.
func (*ContactPointDTO) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{11}
}

func (x *ContactPointDTO) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContactPointDTO) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ContactPointDTO) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ContactPointDTO) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ContactPointDTO) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ContactPointDTO) GetTplId() uint32 {
	if x != nil {
		return x.TplId
	}
	return 0
}

func (x *ContactPointDTO) GetWebhook() string {
	if x != nil {
		return x.Webhook
	}
	return ""
}

func (x *ContactPointDTO) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ContactPointDTO) GetSeverity() []string {
	if x != nil {
		return x.Severity
	}
	return nil
}

func (x *ContactPointDTO) GetSeverityDesc() string {
	if x != nil {
		return x.SeverityDesc
	}
	return ""
}

func (x *ContactPointDTO) GetShow() string {
	if x != nil {
		return x.Show
	}
	return ""
}

func (x *ContactPointDTO) GetFixed() string {
	if x != nil {
		return x.Fixed
	}
	return ""
}

func (x *ContactPointDTO) GetAlertWebhooks() []*AlertWebhookDTO {
	if x != nil {
		return x.AlertWebhooks
	}
	return nil
}

// Channel 模板定义
type ChannelDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID 主键
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 创建时间
	CreatedAt string `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt string `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// 创建人
	CreatedBy string `protobuf:"bytes,4,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	// 更新人
	UpdatedBy string `protobuf:"bytes,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
	// 通道名称，唯一，最大长度256
	Name string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	// 用途，不为空，默认值为"default"，最大长度45
	Use string `protobuf:"bytes,7,opt,name=use,proto3" json:"use,omitempty"`
	// 用户列表
	User []string `protobuf:"bytes,8,rep,name=user,proto3" json:"user,omitempty"`
	// 用户组ID列表
	Group []uint32 `protobuf:"varint,9,rep,packed,name=group,proto3" json:"group,omitempty"`
	// 联系点列表
	ContactPoints []*ContactPointDTO `protobuf:"bytes,10,rep,name=contact_points,json=contactPoints,proto3" json:"contact_points,omitempty"`
	// 自定义项列表
	CustomItems []*ContactPointDTO `protobuf:"bytes,11,rep,name=custom_items,json=customItems,proto3" json:"custom_items,omitempty"`
	// 字段重写规则，用于短信电话消息
	DefaultRule map[string]string `protobuf:"bytes,12,rep,name=default_rule,json=defaultRule,proto3" json:"default_rule,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChannelDTO) Reset() {
	*x = ChannelDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_channel_channel_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChannelDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDTO) ProtoMessage() {}

func (x *ChannelDTO) ProtoReflect() protoreflect.Message {
	mi := &file_pb_channel_channel_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDTO.ProtoReflect.Descriptor instead.
func (*ChannelDTO) Descriptor() ([]byte, []int) {
	return file_pb_channel_channel_v1_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelDTO) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChannelDTO) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ChannelDTO) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ChannelDTO) GetCreatedBy() string {
	if x != nil {
		return x.CreatedBy
	}
	return ""
}

func (x *ChannelDTO) GetUpdatedBy() string {
	if x != nil {
		return x.UpdatedBy
	}
	return ""
}

func (x *ChannelDTO) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChannelDTO) GetUse() string {
	if x != nil {
		return x.Use
	}
	return ""
}

func (x *ChannelDTO) GetUser() []string {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChannelDTO) GetGroup() []uint32 {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ChannelDTO) GetContactPoints() []*ContactPointDTO {
	if x != nil {
		return x.ContactPoints
	}
	return nil
}

func (x *ChannelDTO) GetCustomItems() []*ContactPointDTO {
	if x != nil {
		return x.CustomItems
	}
	return nil
}

func (x *ChannelDTO) GetDefaultRule() map[string]string {
	if x != nil {
		return x.DefaultRule
	}
	return nil
}

var File_pb_channel_channel_v1_proto protoreflect.FileDescriptor

var file_pb_channel_channel_v1_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x6f,
	0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6b, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x6d, 0x69, 0x64,
	0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x28, 0x0a,
	0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x8b, 0x02,
	0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x69,
	0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0b,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x19, 0x0a, 0x17, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x84, 0x02, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e,
	0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f,
	0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x14, 0x0a,
	0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0xf4, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x86, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x12, 0x36, 0x0a, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x22, 0x64, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44,
	0x54, 0x4f, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfb,
	0x01, 0x0a, 0x0f, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44,
	0x54, 0x4f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x51, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63,
	0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x44, 0x54, 0x4f, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x6d, 0x0a,
	0x11, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x1e, 0x0a,
	0x1a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x10, 0x01, 0x12, 0x1d, 0x0a,
	0x19, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x49, 0x73, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x02, 0x22, 0x9a, 0x03, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x70, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x70, 0x6c, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73,
	0x68, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x77, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x69, 0x78, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x77,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x22, 0xa8, 0x04, 0x0a, 0x0a, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x54, 0x4f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x52, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6f,
	0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x54, 0x4f, 0x52, 0x0b, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x54, 0x4f, 0x2e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x1a, 0x3e, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x32, 0xbb, 0x07, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x94, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69,
	0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x27,
	0xc2, 0xdb, 0xaa, 0x03, 0x0f, 0x0a, 0x0d, 0x4a, 0x57, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x91, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x2d, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64,
	0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x54, 0x4f, 0x22, 0x2c, 0xc2,
	0xdb, 0xaa, 0x03, 0x0f, 0x0a, 0x0d, 0x4a, 0x57, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x95, 0x01, 0x0a, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e,
	0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x54, 0x4f, 0x22, 0x2a, 0xc2, 0xdb, 0xaa, 0x03, 0x0f, 0x0a, 0x0d,
	0x4a, 0x57, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f,
	0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f,
	0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0xc2, 0xdb, 0xaa, 0x03, 0x0f, 0x0a, 0x0d,
	0x4a, 0x57, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0xac, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35, 0x2e, 0x6f, 0x70, 0x73,
	0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x33, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0xc2, 0xdb, 0xaa, 0x03, 0x0f, 0x0a, 0x0d, 0x4a,
	0x57, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x3a, 0x01, 0x2a, 0x32, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x9d, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x30, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64, 0x6f, 0x2e,
	0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x73, 0x2e, 0x63, 0x6f, 0x64,
	0x6f, 0x2e, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0xc2, 0xdb, 0xaa, 0x03, 0x0f, 0x0a, 0x0d, 0x4a,
	0x57, 0x54, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x77, 0x61, 0x72, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x10, 0x3a, 0x01, 0x2a, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x18, 0x5a, 0x16, 0x63, 0x6f, 0x64, 0x6f, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x63,
	0x65, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_channel_channel_v1_proto_rawDescOnce sync.Once
	file_pb_channel_channel_v1_proto_rawDescData = file_pb_channel_channel_v1_proto_rawDesc
)

func file_pb_channel_channel_v1_proto_rawDescGZIP() []byte {
	file_pb_channel_channel_v1_proto_rawDescOnce.Do(func() {
		file_pb_channel_channel_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_channel_channel_v1_proto_rawDescData)
	})
	return file_pb_channel_channel_v1_proto_rawDescData
}

var file_pb_channel_channel_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_channel_channel_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pb_channel_channel_v1_proto_goTypes = []interface{}{
	(AlertWebhookDTO_AlertCallbackMode)(0), // 0: ops.codo.notice.channel.v1.AlertWebhookDTO.AlertCallbackMode
	(*DeleteChannelRequest)(nil),           // 1: ops.codo.notice.channel.v1.DeleteChannelRequest
	(*DeleteChannelReply)(nil),             // 2: ops.codo.notice.channel.v1.DeleteChannelReply
	(*UpdateChannelBatchRequest)(nil),      // 3: ops.codo.notice.channel.v1.UpdateChannelBatchRequest
	(*UpdateChannelBatchReply)(nil),        // 4: ops.codo.notice.channel.v1.UpdateChannelBatchReply
	(*UpdateChannelRequest)(nil),           // 5: ops.codo.notice.channel.v1.UpdateChannelRequest
	(*UpdateChannelReply)(nil),             // 6: ops.codo.notice.channel.v1.UpdateChannelReply
	(*CreateChannelRequest)(nil),           // 7: ops.codo.notice.channel.v1.CreateChannelRequest
	(*GetChannelRequest)(nil),              // 8: ops.codo.notice.channel.v1.GetChannelRequest
	(*ListChannelRequest)(nil),             // 9: ops.codo.notice.channel.v1.ListChannelRequest
	(*ListChannelReply)(nil),               // 10: ops.codo.notice.channel.v1.ListChannelReply
	(*AlertWebhookDTO)(nil),                // 11: ops.codo.notice.channel.v1.AlertWebhookDTO
	(*ContactPointDTO)(nil),                // 12: ops.codo.notice.channel.v1.ContactPointDTO
	(*ChannelDTO)(nil),                     // 13: ops.codo.notice.channel.v1.ChannelDTO
	nil,                                    // 14: ops.codo.notice.channel.v1.ChannelDTO.DefaultRuleEntry
	(*structpb.Struct)(nil),                // 15: google.protobuf.Struct
}
var file_pb_channel_channel_v1_proto_depIdxs = []int32{
	12, // 0: ops.codo.notice.channel.v1.UpdateChannelBatchRequest.contact_points:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	12, // 1: ops.codo.notice.channel.v1.UpdateChannelBatchRequest.custom_items:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	12, // 2: ops.codo.notice.channel.v1.UpdateChannelRequest.contact_points:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	12, // 3: ops.codo.notice.channel.v1.UpdateChannelRequest.custom_items:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	12, // 4: ops.codo.notice.channel.v1.CreateChannelRequest.contact_points:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	12, // 5: ops.codo.notice.channel.v1.CreateChannelRequest.custom_items:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	15, // 6: ops.codo.notice.channel.v1.ListChannelRequest.filter_map:type_name -> google.protobuf.Struct
	13, // 7: ops.codo.notice.channel.v1.ListChannelReply.data:type_name -> ops.codo.notice.channel.v1.ChannelDTO
	0,  // 8: ops.codo.notice.channel.v1.AlertWebhookDTO.mode:type_name -> ops.codo.notice.channel.v1.AlertWebhookDTO.AlertCallbackMode
	11, // 9: ops.codo.notice.channel.v1.ContactPointDTO.alert_webhooks:type_name -> ops.codo.notice.channel.v1.AlertWebhookDTO
	12, // 10: ops.codo.notice.channel.v1.ChannelDTO.contact_points:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	12, // 11: ops.codo.notice.channel.v1.ChannelDTO.custom_items:type_name -> ops.codo.notice.channel.v1.ContactPointDTO
	14, // 12: ops.codo.notice.channel.v1.ChannelDTO.default_rule:type_name -> ops.codo.notice.channel.v1.ChannelDTO.DefaultRuleEntry
	9,  // 13: ops.codo.notice.channel.v1.Channel.ListChannel:input_type -> ops.codo.notice.channel.v1.ListChannelRequest
	8,  // 14: ops.codo.notice.channel.v1.Channel.GetChannel:input_type -> ops.codo.notice.channel.v1.GetChannelRequest
	7,  // 15: ops.codo.notice.channel.v1.Channel.CreateChannel:input_type -> ops.codo.notice.channel.v1.CreateChannelRequest
	5,  // 16: ops.codo.notice.channel.v1.Channel.UpdateChannel:input_type -> ops.codo.notice.channel.v1.UpdateChannelRequest
	3,  // 17: ops.codo.notice.channel.v1.Channel.UpdateChannelBatch:input_type -> ops.codo.notice.channel.v1.UpdateChannelBatchRequest
	1,  // 18: ops.codo.notice.channel.v1.Channel.DeleteChannel:input_type -> ops.codo.notice.channel.v1.DeleteChannelRequest
	10, // 19: ops.codo.notice.channel.v1.Channel.ListChannel:output_type -> ops.codo.notice.channel.v1.ListChannelReply
	13, // 20: ops.codo.notice.channel.v1.Channel.GetChannel:output_type -> ops.codo.notice.channel.v1.ChannelDTO
	13, // 21: ops.codo.notice.channel.v1.Channel.CreateChannel:output_type -> ops.codo.notice.channel.v1.ChannelDTO
	6,  // 22: ops.codo.notice.channel.v1.Channel.UpdateChannel:output_type -> ops.codo.notice.channel.v1.UpdateChannelReply
	4,  // 23: ops.codo.notice.channel.v1.Channel.UpdateChannelBatch:output_type -> ops.codo.notice.channel.v1.UpdateChannelBatchReply
	2,  // 24: ops.codo.notice.channel.v1.Channel.DeleteChannel:output_type -> ops.codo.notice.channel.v1.DeleteChannelReply
	19, // [19:25] is the sub-list for method output_type
	13, // [13:19] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_pb_channel_channel_v1_proto_init() }
func file_pb_channel_channel_v1_proto_init() {
	if File_pb_channel_channel_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_channel_channel_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelBatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelBatchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListChannelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertWebhookDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactPointDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_channel_channel_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChannelDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_channel_channel_v1_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_channel_channel_v1_proto_goTypes,
		DependencyIndexes: file_pb_channel_channel_v1_proto_depIdxs,
		EnumInfos:         file_pb_channel_channel_v1_proto_enumTypes,
		MessageInfos:      file_pb_channel_channel_v1_proto_msgTypes,
	}.Build()
	File_pb_channel_channel_v1_proto = out.File
	file_pb_channel_channel_v1_proto_rawDesc = nil
	file_pb_channel_channel_v1_proto_goTypes = nil
	file_pb_channel_channel_v1_proto_depIdxs = nil
}
