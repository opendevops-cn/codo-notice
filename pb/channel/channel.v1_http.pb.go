// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: pb/channel/channel.v1.proto

package channel

import (
	context "context"

	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationChannelListChannel = "/ops.codo.notice.channel.v1.Channel/ListChannel"
const OperationChannelGetChannel = "/ops.codo.notice.channel.v1.Channel/GetChannel"
const OperationChannelCreateChannel = "/ops.codo.notice.channel.v1.Channel/CreateChannel"
const OperationChannelUpdateChannel = "/ops.codo.notice.channel.v1.Channel/UpdateChannel"
const OperationChannelUpdateChannelBatch = "/ops.codo.notice.channel.v1.Channel/UpdateChannelBatch"
const OperationChannelDeleteChannel = "/ops.codo.notice.channel.v1.Channel/DeleteChannel"

type ChannelHTTPServer interface {
	ListChannel(context.Context, *ListChannelRequest) (*ListChannelReply, error)
	GetChannel(context.Context, *GetChannelRequest) (*ChannelDTO, error)
	CreateChannel(context.Context, *CreateChannelRequest) (*ChannelDTO, error)
	UpdateChannel(context.Context, *UpdateChannelRequest) (*UpdateChannelReply, error)
	UpdateChannelBatch(context.Context, *UpdateChannelBatchRequest) (*UpdateChannelBatchReply, error)
	DeleteChannel(context.Context, *DeleteChannelRequest) (*DeleteChannelReply, error)
}
type ChannelJWTMiddlewareMiddleware middleware.Middleware

func NewChannelHTTPServerMiddleware(
	JWTMiddleware ChannelJWTMiddlewareMiddleware,
) middleware.Middleware {
	return selector.Server(
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationChannelListChannel).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationChannelGetChannel).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationChannelCreateChannel).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationChannelUpdateChannel).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationChannelUpdateChannelBatch).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationChannelDeleteChannel).Build(),
	).Path(
		OperationChannelListChannel,
		OperationChannelGetChannel,
		OperationChannelCreateChannel,
		OperationChannelUpdateChannel,
		OperationChannelUpdateChannelBatch,
		OperationChannelDeleteChannel,
	).Build()
}

func RegisterChannelHTTPServer(s *http.Server, srv ChannelHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/channel", _Channel_ListChannel0_HTTP_Handler(srv))
	r.GET("/v1/channel/{id}", _Channel_GetChannel0_HTTP_Handler(srv))
	r.POST("/v1/channel", _Channel_CreateChannel0_HTTP_Handler(srv))
	r.PUT("/v1/channel", _Channel_UpdateChannel0_HTTP_Handler(srv))
	r.PATCH("/v1/channel", _Channel_UpdateChannelBatch0_HTTP_Handler(srv))
	r.DELETE("/v1/channel", _Channel_DeleteChannel0_HTTP_Handler(srv))
}

func GenerateChannelHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 6)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/channel",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/channel/{id}",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/v1/channel",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "PUT",
		Path:    "/v1/channel",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "PATCH",
		Path:    "/v1/channel",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "DELETE",
		Path:    "/v1/channel",
		Comment: "",
	})
	return routes
}

func _Channel_ListChannel0_HTTP_Handler(srv ChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListChannelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChannelListChannel)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListChannel(ctx, req.(*ListChannelRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListChannelReply)
		return ctx.Result(200, reply)
	}
}

func _Channel_GetChannel0_HTTP_Handler(srv ChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetChannelRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChannelGetChannel)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetChannel(ctx, req.(*GetChannelRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChannelDTO)
		return ctx.Result(200, reply)
	}
}

func _Channel_CreateChannel0_HTTP_Handler(srv ChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChannelCreateChannel)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateChannel(ctx, req.(*CreateChannelRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ChannelDTO)
		return ctx.Result(200, reply)
	}
}

func _Channel_UpdateChannel0_HTTP_Handler(srv ChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChannelUpdateChannel)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateChannel(ctx, req.(*UpdateChannelRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateChannelReply)
		return ctx.Result(200, reply)
	}
}

func _Channel_UpdateChannelBatch0_HTTP_Handler(srv ChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateChannelBatchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChannelUpdateChannelBatch)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateChannelBatch(ctx, req.(*UpdateChannelBatchRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateChannelBatchReply)
		return ctx.Result(200, reply)
	}
}

func _Channel_DeleteChannel0_HTTP_Handler(srv ChannelHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteChannelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChannelDeleteChannel)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteChannel(ctx, req.(*DeleteChannelRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteChannelReply)
		return ctx.Result(200, reply)
	}
}

type ChannelHTTPClient interface {
	ListChannel(ctx context.Context, req *ListChannelRequest, opts ...http.CallOption) (rsp *ListChannelReply, err error)
	GetChannel(ctx context.Context, req *GetChannelRequest, opts ...http.CallOption) (rsp *ChannelDTO, err error)
	CreateChannel(ctx context.Context, req *CreateChannelRequest, opts ...http.CallOption) (rsp *ChannelDTO, err error)
	UpdateChannel(ctx context.Context, req *UpdateChannelRequest, opts ...http.CallOption) (rsp *UpdateChannelReply, err error)
	UpdateChannelBatch(ctx context.Context, req *UpdateChannelBatchRequest, opts ...http.CallOption) (rsp *UpdateChannelBatchReply, err error)
	DeleteChannel(ctx context.Context, req *DeleteChannelRequest, opts ...http.CallOption) (rsp *DeleteChannelReply, err error)
}

type ChannelHTTPClientImpl struct {
	cc *http.Client
}

func NewChannelHTTPClient(client *http.Client) ChannelHTTPClient {
	return &ChannelHTTPClientImpl{client}
}

func (c *ChannelHTTPClientImpl) ListChannel(ctx context.Context, in *ListChannelRequest, opts ...http.CallOption) (*ListChannelReply, error) {
	var out ListChannelReply
	pattern := "/v1/channel"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChannelListChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChannelHTTPClientImpl) GetChannel(ctx context.Context, in *GetChannelRequest, opts ...http.CallOption) (*ChannelDTO, error) {
	var out ChannelDTO
	pattern := "/v1/channel/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChannelGetChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChannelHTTPClientImpl) CreateChannel(ctx context.Context, in *CreateChannelRequest, opts ...http.CallOption) (*ChannelDTO, error) {
	var out ChannelDTO
	pattern := "/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChannelCreateChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChannelHTTPClientImpl) UpdateChannel(ctx context.Context, in *UpdateChannelRequest, opts ...http.CallOption) (*UpdateChannelReply, error) {
	var out UpdateChannelReply
	pattern := "/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChannelUpdateChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChannelHTTPClientImpl) UpdateChannelBatch(ctx context.Context, in *UpdateChannelBatchRequest, opts ...http.CallOption) (*UpdateChannelBatchReply, error) {
	var out UpdateChannelBatchReply
	pattern := "/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChannelUpdateChannelBatch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ChannelHTTPClientImpl) DeleteChannel(ctx context.Context, in *DeleteChannelRequest, opts ...http.CallOption) (*DeleteChannelReply, error) {
	var out DeleteChannelReply
	pattern := "/v1/channel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChannelDeleteChannel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
