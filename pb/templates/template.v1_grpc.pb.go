// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/templates/template.v1.proto

package templates

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Templates_ListTemplate_FullMethodName        = "/ops.codo.notice.templates.v1.Templates/ListTemplate"
	Templates_GetTemplate_FullMethodName         = "/ops.codo.notice.templates.v1.Templates/GetTemplate"
	Templates_CreateTemplate_FullMethodName      = "/ops.codo.notice.templates.v1.Templates/CreateTemplate"
	Templates_UpdateTemplate_FullMethodName      = "/ops.codo.notice.templates.v1.Templates/UpdateTemplate"
	Templates_UpdateTemplateBatch_FullMethodName = "/ops.codo.notice.templates.v1.Templates/UpdateTemplateBatch"
	Templates_DeleteTemplate_FullMethodName      = "/ops.codo.notice.templates.v1.Templates/DeleteTemplate"
	Templates_AlertTemplate_FullMethodName       = "/ops.codo.notice.templates.v1.Templates/AlertTemplate"
)

// TemplatesClient is the client API for Templates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TemplatesClient interface {
	ListTemplate(ctx context.Context, in *ListTemplateRequest, opts ...grpc.CallOption) (*ListTemplateReply, error)
	GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*TemplateDTO, error)
	CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*TemplateDTO, error)
	UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateReply, error)
	UpdateTemplateBatch(ctx context.Context, in *UpdateTemplateBatchRequest, opts ...grpc.CallOption) (*UpdateTemplateBatchReply, error)
	DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateReply, error)
	AlertTemplate(ctx context.Context, in *AlertTemplateRequest, opts ...grpc.CallOption) (*AlertTemplateReply, error)
}

type templatesClient struct {
	cc grpc.ClientConnInterface
}

func NewTemplatesClient(cc grpc.ClientConnInterface) TemplatesClient {
	return &templatesClient{cc}
}

func (c *templatesClient) ListTemplate(ctx context.Context, in *ListTemplateRequest, opts ...grpc.CallOption) (*ListTemplateReply, error) {
	out := new(ListTemplateReply)
	err := c.cc.Invoke(ctx, Templates_ListTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...grpc.CallOption) (*TemplateDTO, error) {
	out := new(TemplateDTO)
	err := c.cc.Invoke(ctx, Templates_GetTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...grpc.CallOption) (*TemplateDTO, error) {
	out := new(TemplateDTO)
	err := c.cc.Invoke(ctx, Templates_CreateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...grpc.CallOption) (*UpdateTemplateReply, error) {
	out := new(UpdateTemplateReply)
	err := c.cc.Invoke(ctx, Templates_UpdateTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) UpdateTemplateBatch(ctx context.Context, in *UpdateTemplateBatchRequest, opts ...grpc.CallOption) (*UpdateTemplateBatchReply, error) {
	out := new(UpdateTemplateBatchReply)
	err := c.cc.Invoke(ctx, Templates_UpdateTemplateBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...grpc.CallOption) (*DeleteTemplateReply, error) {
	out := new(DeleteTemplateReply)
	err := c.cc.Invoke(ctx, Templates_DeleteTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *templatesClient) AlertTemplate(ctx context.Context, in *AlertTemplateRequest, opts ...grpc.CallOption) (*AlertTemplateReply, error) {
	out := new(AlertTemplateReply)
	err := c.cc.Invoke(ctx, Templates_AlertTemplate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TemplatesServer is the server API for Templates service.
// All implementations must embed UnimplementedTemplatesServer
// for forward compatibility
type TemplatesServer interface {
	ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateReply, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*TemplateDTO, error)
	CreateTemplate(context.Context, *CreateTemplateRequest) (*TemplateDTO, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateReply, error)
	UpdateTemplateBatch(context.Context, *UpdateTemplateBatchRequest) (*UpdateTemplateBatchReply, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateReply, error)
	AlertTemplate(context.Context, *AlertTemplateRequest) (*AlertTemplateReply, error)
	mustEmbedUnimplementedTemplatesServer()
}

// UnimplementedTemplatesServer must be embedded to have forward compatible implementations.
type UnimplementedTemplatesServer struct {
}

func (UnimplementedTemplatesServer) ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTemplate not implemented")
}
func (UnimplementedTemplatesServer) GetTemplate(context.Context, *GetTemplateRequest) (*TemplateDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplate not implemented")
}
func (UnimplementedTemplatesServer) CreateTemplate(context.Context, *CreateTemplateRequest) (*TemplateDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTemplate not implemented")
}
func (UnimplementedTemplatesServer) UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplate not implemented")
}
func (UnimplementedTemplatesServer) UpdateTemplateBatch(context.Context, *UpdateTemplateBatchRequest) (*UpdateTemplateBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTemplateBatch not implemented")
}
func (UnimplementedTemplatesServer) DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTemplate not implemented")
}
func (UnimplementedTemplatesServer) AlertTemplate(context.Context, *AlertTemplateRequest) (*AlertTemplateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertTemplate not implemented")
}
func (UnimplementedTemplatesServer) mustEmbedUnimplementedTemplatesServer() {}

// UnsafeTemplatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TemplatesServer will
// result in compilation errors.
type UnsafeTemplatesServer interface {
	mustEmbedUnimplementedTemplatesServer()
}

func RegisterTemplatesServer(s grpc.ServiceRegistrar, srv TemplatesServer) {
	s.RegisterService(&Templates_ServiceDesc, srv)
}

func _Templates_ListTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).ListTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_ListTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).ListTemplate(ctx, req.(*ListTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_GetTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).GetTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_GetTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).GetTemplate(ctx, req.(*GetTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_CreateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).CreateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_CreateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).CreateTemplate(ctx, req.(*CreateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpdateTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_UpdateTemplateBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTemplateBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).UpdateTemplateBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_UpdateTemplateBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).UpdateTemplateBatch(ctx, req.(*UpdateTemplateBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_DeleteTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).DeleteTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_DeleteTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Templates_AlertTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TemplatesServer).AlertTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Templates_AlertTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TemplatesServer).AlertTemplate(ctx, req.(*AlertTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Templates_ServiceDesc is the grpc.ServiceDesc for Templates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Templates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ops.codo.notice.templates.v1.Templates",
	HandlerType: (*TemplatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTemplate",
			Handler:    _Templates_ListTemplate_Handler,
		},
		{
			MethodName: "GetTemplate",
			Handler:    _Templates_GetTemplate_Handler,
		},
		{
			MethodName: "CreateTemplate",
			Handler:    _Templates_CreateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplate",
			Handler:    _Templates_UpdateTemplate_Handler,
		},
		{
			MethodName: "UpdateTemplateBatch",
			Handler:    _Templates_UpdateTemplateBatch_Handler,
		},
		{
			MethodName: "DeleteTemplate",
			Handler:    _Templates_DeleteTemplate_Handler,
		},
		{
			MethodName: "AlertTemplate",
			Handler:    _Templates_AlertTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/templates/template.v1.proto",
}
