syntax = "proto3";


package ops.codo.notice.templates.v1;

option go_package = "codo-notice/pb/templates";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "khttp/middleware.proto";

service Templates {
  rpc ListTemplate(ListTemplateRequest) returns (ListTemplateReply) {
    option (google.api.http) = {
      get: "/v1/template"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
  rpc GetTemplate(GetTemplateRequest) returns (TemplateDTO) {
    option (google.api.http) = {
      get: "/v1/template/{id}"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
  rpc CreateTemplate(CreateTemplateRequest) returns (TemplateDTO) {
    option (google.api.http) = {
      post: "/v1/template"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
  rpc UpdateTemplate(UpdateTemplateRequest) returns (UpdateTemplateReply) {
    option (google.api.http) = {
      put: "/v1/template"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
  rpc UpdateTemplateBatch(UpdateTemplateBatchRequest) returns (UpdateTemplateBatchReply) {
    option (google.api.http) = {
      patch: "/v1/template"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
  rpc DeleteTemplate(DeleteTemplateRequest) returns (DeleteTemplateReply) {
    option (google.api.http) = {
      delete: "/v1/template"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
  rpc AlertTemplate(AlertTemplateRequest) returns (AlertTemplateReply) {
    option (google.api.http) = {
      post: "/v1/alert"
      body: "*"
    };
    option (github.ccheers.pggh.khttp.middleware) = {
      names: ["JWTMiddleware"]
    };
  };
}

message AlertTemplateRequest {
  // 模板类型
  string type = 1;
  // 模板用途
  string use = 2;
  // 模板内容
  string tpl = 3;
  // url/phone/email 多个以逗号分隔
  string url = 4;
  // 手机号 多个以逗号分隔
  string phone = 5;
  // 邮箱 多个以逗号分隔
  string email = 6;
  // 密钥
  string secret = 7;
  // @对象 多个以逗号分隔 ldap的用户名 如：wuzi
  string at = 8;
}
message AlertTemplateReply {}

message DeleteTemplateRequest {
  repeated uint32 ids = 1;
}
message DeleteTemplateReply {}

message UpdateTemplateBatchRequest {
  repeated uint32 ids = 1;
  string name = 2;
  string type = 3;
  string use = 4;
  string content = 5;
}
message UpdateTemplateBatchReply {}

message UpdateTemplateRequest {
  uint32 id = 1;
  string name = 2;
  string type = 3;
  string use = 4;
  string content = 5;
}
message UpdateTemplateReply {}

message CreateTemplateRequest {
  string name = 1;
  string type = 2;
  string use = 3;
  string content = 4;
}

message GetTemplateRequest {
  uint32 id = 1;
}

message ListTemplateRequest {
  // 每页条数
  int32 pageSize = 1;

  // 第几页
  int32 pageNum = 2;

  // 正序或倒序 ascend  descend
  string order = 3;

  // 全局搜索关键字
  string searchText = 4;

  // 搜索字段
  string searchField = 5;

  // 排序关键字
  string field = 6;

  // yes:缓存，no:不缓存
  string cache = 7;

  // 多字段搜索,精准匹配
  google.protobuf.Struct filter_map = 8;
}
message ListTemplateReply {
  // 列表
  repeated TemplateDTO data = 1;
  // 总数
  int32 count = 2;
}


// Template 模板定义
message TemplateDTO {
  // ID 主键
  uint32 id = 1;

  // 创建时间
  string created_at = 2;

  // 更新时间
  string updated_at = 3;

  // 创建人
  string created_by = 4;

  // 更新人
  string updated_by = 5;

  // 模板名称，唯一且不为空，最大长度256
  string name = 6;

  // 模板内容
  string content = 7;

  // 模板类型，不为空，默认值为"default"，最大长度16
  string type = 8;

  // 模板用途，不为空，默认值为"default"，最大长度45
  string use = 9;

  // 是否为默认模板，可选值："yes"/"no"，默认值为"no"，最大长度16
  string default = 10;

  // path 路径信息
  string path = 11;
}
