// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: pb/templates/template.v1.proto

package templates

import (
	context "context"

	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationTemplatesListTemplate = "/ops.codo.notice.templates.v1.Templates/ListTemplate"
const OperationTemplatesGetTemplate = "/ops.codo.notice.templates.v1.Templates/GetTemplate"
const OperationTemplatesCreateTemplate = "/ops.codo.notice.templates.v1.Templates/CreateTemplate"
const OperationTemplatesUpdateTemplate = "/ops.codo.notice.templates.v1.Templates/UpdateTemplate"
const OperationTemplatesUpdateTemplateBatch = "/ops.codo.notice.templates.v1.Templates/UpdateTemplateBatch"
const OperationTemplatesDeleteTemplate = "/ops.codo.notice.templates.v1.Templates/DeleteTemplate"
const OperationTemplatesAlertTemplate = "/ops.codo.notice.templates.v1.Templates/AlertTemplate"

type TemplatesHTTPServer interface {
	ListTemplate(context.Context, *ListTemplateRequest) (*ListTemplateReply, error)
	GetTemplate(context.Context, *GetTemplateRequest) (*TemplateDTO, error)
	CreateTemplate(context.Context, *CreateTemplateRequest) (*TemplateDTO, error)
	UpdateTemplate(context.Context, *UpdateTemplateRequest) (*UpdateTemplateReply, error)
	UpdateTemplateBatch(context.Context, *UpdateTemplateBatchRequest) (*UpdateTemplateBatchReply, error)
	DeleteTemplate(context.Context, *DeleteTemplateRequest) (*DeleteTemplateReply, error)
	AlertTemplate(context.Context, *AlertTemplateRequest) (*AlertTemplateReply, error)
}
type TemplatesJWTMiddlewareMiddleware middleware.Middleware

func NewTemplatesHTTPServerMiddleware(
	JWTMiddleware TemplatesJWTMiddlewareMiddleware,
) middleware.Middleware {
	return selector.Server(
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesListTemplate).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesGetTemplate).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesCreateTemplate).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesUpdateTemplate).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesUpdateTemplateBatch).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesDeleteTemplate).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationTemplatesAlertTemplate).Build(),
	).Path(
		OperationTemplatesListTemplate,
		OperationTemplatesGetTemplate,
		OperationTemplatesCreateTemplate,
		OperationTemplatesUpdateTemplate,
		OperationTemplatesUpdateTemplateBatch,
		OperationTemplatesDeleteTemplate,
		OperationTemplatesAlertTemplate,
	).Build()
}

func RegisterTemplatesHTTPServer(s *http.Server, srv TemplatesHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/template", _Templates_ListTemplate0_HTTP_Handler(srv))
	r.GET("/v1/template/{id}", _Templates_GetTemplate0_HTTP_Handler(srv))
	r.POST("/v1/template", _Templates_CreateTemplate0_HTTP_Handler(srv))
	r.PUT("/v1/template", _Templates_UpdateTemplate0_HTTP_Handler(srv))
	r.PATCH("/v1/template", _Templates_UpdateTemplateBatch0_HTTP_Handler(srv))
	r.DELETE("/v1/template", _Templates_DeleteTemplate0_HTTP_Handler(srv))
	r.POST("/v1/alert", _Templates_AlertTemplate0_HTTP_Handler(srv))
}

func GenerateTemplatesHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 7)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/template",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/template/{id}",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/v1/template",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "PUT",
		Path:    "/v1/template",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "PATCH",
		Path:    "/v1/template",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "DELETE",
		Path:    "/v1/template",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/v1/alert",
		Comment: "",
	})
	return routes
}

func _Templates_ListTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesListTemplate)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTemplate(ctx, req.(*ListTemplateRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Templates_GetTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetTemplateRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesGetTemplate)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTemplate(ctx, req.(*GetTemplateRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TemplateDTO)
		return ctx.Result(200, reply)
	}
}

func _Templates_CreateTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesCreateTemplate)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTemplate(ctx, req.(*CreateTemplateRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TemplateDTO)
		return ctx.Result(200, reply)
	}
}

func _Templates_UpdateTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesUpdateTemplate)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTemplate(ctx, req.(*UpdateTemplateRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Templates_UpdateTemplateBatch0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateTemplateBatchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesUpdateTemplateBatch)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTemplateBatch(ctx, req.(*UpdateTemplateBatchRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateTemplateBatchReply)
		return ctx.Result(200, reply)
	}
}

func _Templates_DeleteTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesDeleteTemplate)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTemplate(ctx, req.(*DeleteTemplateRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteTemplateReply)
		return ctx.Result(200, reply)
	}
}

func _Templates_AlertTemplate0_HTTP_Handler(srv TemplatesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in AlertTemplateRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTemplatesAlertTemplate)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AlertTemplate(ctx, req.(*AlertTemplateRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AlertTemplateReply)
		return ctx.Result(200, reply)
	}
}

type TemplatesHTTPClient interface {
	ListTemplate(ctx context.Context, req *ListTemplateRequest, opts ...http.CallOption) (rsp *ListTemplateReply, err error)
	GetTemplate(ctx context.Context, req *GetTemplateRequest, opts ...http.CallOption) (rsp *TemplateDTO, err error)
	CreateTemplate(ctx context.Context, req *CreateTemplateRequest, opts ...http.CallOption) (rsp *TemplateDTO, err error)
	UpdateTemplate(ctx context.Context, req *UpdateTemplateRequest, opts ...http.CallOption) (rsp *UpdateTemplateReply, err error)
	UpdateTemplateBatch(ctx context.Context, req *UpdateTemplateBatchRequest, opts ...http.CallOption) (rsp *UpdateTemplateBatchReply, err error)
	DeleteTemplate(ctx context.Context, req *DeleteTemplateRequest, opts ...http.CallOption) (rsp *DeleteTemplateReply, err error)
	AlertTemplate(ctx context.Context, req *AlertTemplateRequest, opts ...http.CallOption) (rsp *AlertTemplateReply, err error)
}

type TemplatesHTTPClientImpl struct {
	cc *http.Client
}

func NewTemplatesHTTPClient(client *http.Client) TemplatesHTTPClient {
	return &TemplatesHTTPClientImpl{client}
}

func (c *TemplatesHTTPClientImpl) ListTemplate(ctx context.Context, in *ListTemplateRequest, opts ...http.CallOption) (*ListTemplateReply, error) {
	var out ListTemplateReply
	pattern := "/v1/template"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTemplatesListTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) GetTemplate(ctx context.Context, in *GetTemplateRequest, opts ...http.CallOption) (*TemplateDTO, error) {
	var out TemplateDTO
	pattern := "/v1/template/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTemplatesGetTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) CreateTemplate(ctx context.Context, in *CreateTemplateRequest, opts ...http.CallOption) (*TemplateDTO, error) {
	var out TemplateDTO
	pattern := "/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplatesCreateTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) UpdateTemplate(ctx context.Context, in *UpdateTemplateRequest, opts ...http.CallOption) (*UpdateTemplateReply, error) {
	var out UpdateTemplateReply
	pattern := "/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplatesUpdateTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) UpdateTemplateBatch(ctx context.Context, in *UpdateTemplateBatchRequest, opts ...http.CallOption) (*UpdateTemplateBatchReply, error) {
	var out UpdateTemplateBatchReply
	pattern := "/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplatesUpdateTemplateBatch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) DeleteTemplate(ctx context.Context, in *DeleteTemplateRequest, opts ...http.CallOption) (*DeleteTemplateReply, error) {
	var out DeleteTemplateReply
	pattern := "/v1/template"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplatesDeleteTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TemplatesHTTPClientImpl) AlertTemplate(ctx context.Context, in *AlertTemplateRequest, opts ...http.CallOption) (*AlertTemplateReply, error) {
	var out AlertTemplateReply
	pattern := "/v1/alert"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTemplatesAlertTemplate))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
