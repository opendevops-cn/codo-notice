// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: pb/healthy/healthy.v1.proto

package healthy

import (
	context "context"

	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationHealthyHealthy = "/ops.codo.notice.healthy.v1.Healthy/Healthy"

type HealthyHTTPServer interface {
	// Healthy健康检查
	Healthy(context.Context, *HealthyRequest) (*HealthyReply, error)
}
type HealthyJWTMiddlewareMiddleware middleware.Middleware

func NewHealthyHTTPServerMiddleware(
	JWTMiddleware HealthyJWTMiddlewareMiddleware,
) middleware.Middleware {
	return selector.Server(
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationHealthyHealthy).Build(),
	).Path(
		OperationHealthyHealthy,
	).Build()
}

func RegisterHealthyHTTPServer(s *http.Server, srv HealthyHTTPServer) {
	r := s.Route("/")
	r.GET("/healthz", _Healthy_Healthy0_HTTP_Handler(srv))
}

func GenerateHealthyHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 1)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/healthz",
		Comment: "健康检查",
	})
	return routes
}

func _Healthy_Healthy0_HTTP_Handler(srv HealthyHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in HealthyRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHealthyHealthy)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Healthy(ctx, req.(*HealthyRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*HealthyReply)
		return ctx.Result(200, reply)
	}
}

type HealthyHTTPClient interface {
	Healthy(ctx context.Context, req *HealthyRequest, opts ...http.CallOption) (rsp *HealthyReply, err error)
}

type HealthyHTTPClientImpl struct {
	cc *http.Client
}

func NewHealthyHTTPClient(client *http.Client) HealthyHTTPClient {
	return &HealthyHTTPClientImpl{client}
}

func (c *HealthyHTTPClientImpl) Healthy(ctx context.Context, in *HealthyRequest, opts ...http.CallOption) (*HealthyReply, error) {
	var out HealthyReply
	pattern := "/healthz"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHealthyHealthy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
