// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: pb/router/router.v1.proto

package router

import (
	context "context"

	audit "github.com/Ccheers/protoc-gen-go-kratos-http/audit"
	kcontext "github.com/Ccheers/protoc-gen-go-kratos-http/kcontext"
	route "github.com/Ccheers/protoc-gen-go-kratos-http/route"
	middleware "github.com/go-kratos/kratos/v2/middleware"
	selector "github.com/go-kratos/kratos/v2/middleware/selector"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type _ = middleware.Middleware
type _ = selector.Builder
type _ = route.Route
type _ = audit.Audit

var _ = kcontext.SetKHTTPContextWithContext

const OperationRouterListRouter = "/ops.codo.notice.routers.v1.Router/ListRouter"
const OperationRouterGetRouter = "/ops.codo.notice.routers.v1.Router/GetRouter"
const OperationRouterCreateRouter = "/ops.codo.notice.routers.v1.Router/CreateRouter"
const OperationRouterUpdateRouter = "/ops.codo.notice.routers.v1.Router/UpdateRouter"
const OperationRouterUpdateRouterBatch = "/ops.codo.notice.routers.v1.Router/UpdateRouterBatch"
const OperationRouterDeleteRouter = "/ops.codo.notice.routers.v1.Router/DeleteRouter"
const OperationRouterAlertRouterPOST = "/ops.codo.notice.routers.v1.Router/AlertRouterPOST"
const OperationRouterAlertRouterGET = "/ops.codo.notice.routers.v1.Router/AlertRouterGET"

type RouterHTTPServer interface {
	ListRouter(context.Context, *ListRouterRequest) (*ListRouterReply, error)
	GetRouter(context.Context, *GetRouterRequest) (*RouterDTO, error)
	CreateRouter(context.Context, *CreateRouterRequest) (*RouterDTO, error)
	UpdateRouter(context.Context, *UpdateRouterRequest) (*UpdateRouterReply, error)
	UpdateRouterBatch(context.Context, *UpdateRouterBatchRequest) (*UpdateRouterBatchReply, error)
	DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterReply, error)
	AlertRouterPOST(context.Context, *AlertRouterRequest) (*AlertRouterReply, error)
	AlertRouterGET(context.Context, *AlertRouterRequest) (*AlertRouterReply, error)
}
type RouterJWTMiddlewareMiddleware middleware.Middleware

func NewRouterHTTPServerMiddleware(
	JWTMiddleware RouterJWTMiddlewareMiddleware,
) middleware.Middleware {
	return selector.Server(
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterListRouter).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterGetRouter).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterCreateRouter).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterUpdateRouter).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterUpdateRouterBatch).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterDeleteRouter).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterAlertRouterPOST).Build(),
		selector.Server(
			middleware.Middleware(JWTMiddleware),
		).Path(OperationRouterAlertRouterGET).Build(),
	).Path(
		OperationRouterListRouter,
		OperationRouterGetRouter,
		OperationRouterCreateRouter,
		OperationRouterUpdateRouter,
		OperationRouterUpdateRouterBatch,
		OperationRouterDeleteRouter,
		OperationRouterAlertRouterPOST,
		OperationRouterAlertRouterGET,
	).Build()
}

func RegisterRouterHTTPServer(s *http.Server, srv RouterHTTPServer) {
	r := s.Route("/")
	r.GET("/v1/router", _Router_ListRouter0_HTTP_Handler(srv))
	r.GET("/v1/router/{id}", _Router_GetRouter0_HTTP_Handler(srv))
	r.POST("/v1/router", _Router_CreateRouter0_HTTP_Handler(srv))
	r.PUT("/v1/router", _Router_UpdateRouter0_HTTP_Handler(srv))
	r.PATCH("/v1/router", _Router_UpdateRouterBatch0_HTTP_Handler(srv))
	r.DELETE("/v1/router", _Router_DeleteRouter0_HTTP_Handler(srv))
	r.POST("/v1/router-alert", _Router_AlertRouterPOST0_HTTP_Handler(srv))
	r.GET("/v1/router-alert", _Router_AlertRouterGET0_HTTP_Handler(srv))
}

func GenerateRouterHTTPServerRouteInfo() []route.Route {
	routes := make([]route.Route, 0, 8)
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/router",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/router/{id}",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/v1/router",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "PUT",
		Path:    "/v1/router",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "PATCH",
		Path:    "/v1/router",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "DELETE",
		Path:    "/v1/router",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "POST",
		Path:    "/v1/router-alert",
		Comment: "",
	})
	routes = append(routes, route.Route{
		Method:  "GET",
		Path:    "/v1/router-alert",
		Comment: "",
	})
	return routes
}

func _Router_ListRouter0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in ListRouterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterListRouter)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRouter(ctx, req.(*ListRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRouterReply)
		return ctx.Result(200, reply)
	}
}

func _Router_GetRouter0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in GetRouterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterGetRouter)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRouter(ctx, req.(*GetRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RouterDTO)
		return ctx.Result(200, reply)
	}
}

func _Router_CreateRouter0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in CreateRouterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterCreateRouter)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRouter(ctx, req.(*CreateRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RouterDTO)
		return ctx.Result(200, reply)
	}
}

func _Router_UpdateRouter0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateRouterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterUpdateRouter)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRouter(ctx, req.(*UpdateRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRouterReply)
		return ctx.Result(200, reply)
	}
}

func _Router_UpdateRouterBatch0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in UpdateRouterBatchRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterUpdateRouterBatch)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRouterBatch(ctx, req.(*UpdateRouterBatchRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRouterBatchReply)
		return ctx.Result(200, reply)
	}
}

func _Router_DeleteRouter0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in DeleteRouterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterDeleteRouter)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRouter(ctx, req.(*DeleteRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRouterReply)
		return ctx.Result(200, reply)
	}
}

func _Router_AlertRouterPOST0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in AlertRouterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterAlertRouterPOST)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AlertRouterPOST(ctx, req.(*AlertRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AlertRouterReply)
		return ctx.Result(200, reply)
	}
}

func _Router_AlertRouterGET0_HTTP_Handler(srv RouterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		stdCtx := kcontext.SetKHTTPContextWithContext(ctx, ctx)
		var in AlertRouterRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRouterAlertRouterGET)

		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AlertRouterGET(ctx, req.(*AlertRouterRequest))
		})
		out, err := h(stdCtx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AlertRouterReply)
		return ctx.Result(200, reply)
	}
}

type RouterHTTPClient interface {
	ListRouter(ctx context.Context, req *ListRouterRequest, opts ...http.CallOption) (rsp *ListRouterReply, err error)
	GetRouter(ctx context.Context, req *GetRouterRequest, opts ...http.CallOption) (rsp *RouterDTO, err error)
	CreateRouter(ctx context.Context, req *CreateRouterRequest, opts ...http.CallOption) (rsp *RouterDTO, err error)
	UpdateRouter(ctx context.Context, req *UpdateRouterRequest, opts ...http.CallOption) (rsp *UpdateRouterReply, err error)
	UpdateRouterBatch(ctx context.Context, req *UpdateRouterBatchRequest, opts ...http.CallOption) (rsp *UpdateRouterBatchReply, err error)
	DeleteRouter(ctx context.Context, req *DeleteRouterRequest, opts ...http.CallOption) (rsp *DeleteRouterReply, err error)
	AlertRouterPOST(ctx context.Context, req *AlertRouterRequest, opts ...http.CallOption) (rsp *AlertRouterReply, err error)
	AlertRouterGET(ctx context.Context, req *AlertRouterRequest, opts ...http.CallOption) (rsp *AlertRouterReply, err error)
}

type RouterHTTPClientImpl struct {
	cc *http.Client
}

func NewRouterHTTPClient(client *http.Client) RouterHTTPClient {
	return &RouterHTTPClientImpl{client}
}

func (c *RouterHTTPClientImpl) ListRouter(ctx context.Context, in *ListRouterRequest, opts ...http.CallOption) (*ListRouterReply, error) {
	var out ListRouterReply
	pattern := "/v1/router"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRouterListRouter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) GetRouter(ctx context.Context, in *GetRouterRequest, opts ...http.CallOption) (*RouterDTO, error) {
	var out RouterDTO
	pattern := "/v1/router/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRouterGetRouter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...http.CallOption) (*RouterDTO, error) {
	var out RouterDTO
	pattern := "/v1/router"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterCreateRouter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...http.CallOption) (*UpdateRouterReply, error) {
	var out UpdateRouterReply
	pattern := "/v1/router"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterUpdateRouter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) UpdateRouterBatch(ctx context.Context, in *UpdateRouterBatchRequest, opts ...http.CallOption) (*UpdateRouterBatchReply, error) {
	var out UpdateRouterBatchReply
	pattern := "/v1/router"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterUpdateRouterBatch))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...http.CallOption) (*DeleteRouterReply, error) {
	var out DeleteRouterReply
	pattern := "/v1/router"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterDeleteRouter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) AlertRouterPOST(ctx context.Context, in *AlertRouterRequest, opts ...http.CallOption) (*AlertRouterReply, error) {
	var out AlertRouterReply
	pattern := "/v1/router-alert"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRouterAlertRouterPOST))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RouterHTTPClientImpl) AlertRouterGET(ctx context.Context, in *AlertRouterRequest, opts ...http.CallOption) (*AlertRouterReply, error) {
	var out AlertRouterReply
	pattern := "/v1/router-alert"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRouterAlertRouterGET))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
