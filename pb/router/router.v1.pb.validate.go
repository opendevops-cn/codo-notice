// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pb/router/router.v1.proto

package router

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AlertRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AlertRouterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertRouterRequestMultiError, or nil if none found.
func (m *AlertRouterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRouterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AlertRouterRequestMultiError(errors)
	}

	return nil
}

// AlertRouterRequestMultiError is an error wrapping multiple validation errors
// returned by AlertRouterRequest.ValidateAll() if the designated constraints
// aren't met.
type AlertRouterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRouterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRouterRequestMultiError) AllErrors() []error { return m }

// AlertRouterRequestValidationError is the validation error returned by
// AlertRouterRequest.Validate if the designated constraints aren't met.
type AlertRouterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRouterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRouterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRouterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRouterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRouterRequestValidationError) ErrorName() string {
	return "AlertRouterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AlertRouterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRouterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRouterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRouterRequestValidationError{}

// Validate checks the field values on AlertRouterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AlertRouterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AlertRouterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AlertRouterReplyMultiError, or nil if none found.
func (m *AlertRouterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AlertRouterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AlertRouterReplyMultiError(errors)
	}

	return nil
}

// AlertRouterReplyMultiError is an error wrapping multiple validation errors
// returned by AlertRouterReply.ValidateAll() if the designated constraints
// aren't met.
type AlertRouterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AlertRouterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AlertRouterReplyMultiError) AllErrors() []error { return m }

// AlertRouterReplyValidationError is the validation error returned by
// AlertRouterReply.Validate if the designated constraints aren't met.
type AlertRouterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AlertRouterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AlertRouterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AlertRouterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AlertRouterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AlertRouterReplyValidationError) ErrorName() string { return "AlertRouterReplyValidationError" }

// Error satisfies the builtin error interface
func (e AlertRouterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAlertRouterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AlertRouterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AlertRouterReplyValidationError{}

// Validate checks the field values on DeleteRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteRouterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRouterRequestMultiError, or nil if none found.
func (m *DeleteRouterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRouterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRouterRequestMultiError(errors)
	}

	return nil
}

// DeleteRouterRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteRouterRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteRouterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRouterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRouterRequestMultiError) AllErrors() []error { return m }

// DeleteRouterRequestValidationError is the validation error returned by
// DeleteRouterRequest.Validate if the designated constraints aren't met.
type DeleteRouterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRouterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRouterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRouterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRouterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRouterRequestValidationError) ErrorName() string {
	return "DeleteRouterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRouterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRouterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRouterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRouterRequestValidationError{}

// Validate checks the field values on DeleteRouterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteRouterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRouterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteRouterReplyMultiError, or nil if none found.
func (m *DeleteRouterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRouterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteRouterReplyMultiError(errors)
	}

	return nil
}

// DeleteRouterReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteRouterReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteRouterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRouterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRouterReplyMultiError) AllErrors() []error { return m }

// DeleteRouterReplyValidationError is the validation error returned by
// DeleteRouterReply.Validate if the designated constraints aren't met.
type DeleteRouterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRouterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRouterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRouterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRouterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRouterReplyValidationError) ErrorName() string {
	return "DeleteRouterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRouterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRouterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRouterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRouterReplyValidationError{}

// Validate checks the field values on UpdateRouterBatchRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRouterBatchRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRouterBatchRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRouterBatchRequestMultiError, or nil if none found.
func (m *UpdateRouterBatchRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRouterBatchRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetConditionList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRouterBatchRequestValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRouterBatchRequestValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditionList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRouterBatchRequestValidationError{
				field:  "ConditionList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRouterBatchRequestMultiError(errors)
	}

	return nil
}

// UpdateRouterBatchRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRouterBatchRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRouterBatchRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRouterBatchRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRouterBatchRequestMultiError) AllErrors() []error { return m }

// UpdateRouterBatchRequestValidationError is the validation error returned by
// UpdateRouterBatchRequest.Validate if the designated constraints aren't met.
type UpdateRouterBatchRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRouterBatchRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRouterBatchRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRouterBatchRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRouterBatchRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRouterBatchRequestValidationError) ErrorName() string {
	return "UpdateRouterBatchRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRouterBatchRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRouterBatchRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRouterBatchRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRouterBatchRequestValidationError{}

// Validate checks the field values on UpdateRouterBatchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRouterBatchReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRouterBatchReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRouterBatchReplyMultiError, or nil if none found.
func (m *UpdateRouterBatchReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRouterBatchReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRouterBatchReplyMultiError(errors)
	}

	return nil
}

// UpdateRouterBatchReplyMultiError is an error wrapping multiple validation
// errors returned by UpdateRouterBatchReply.ValidateAll() if the designated
// constraints aren't met.
type UpdateRouterBatchReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRouterBatchReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRouterBatchReplyMultiError) AllErrors() []error { return m }

// UpdateRouterBatchReplyValidationError is the validation error returned by
// UpdateRouterBatchReply.Validate if the designated constraints aren't met.
type UpdateRouterBatchReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRouterBatchReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRouterBatchReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRouterBatchReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRouterBatchReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRouterBatchReplyValidationError) ErrorName() string {
	return "UpdateRouterBatchReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRouterBatchReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRouterBatchReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRouterBatchReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRouterBatchReplyValidationError{}

// Validate checks the field values on UpdateRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRouterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRouterRequestMultiError, or nil if none found.
func (m *UpdateRouterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRouterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetConditionList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRouterRequestValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRouterRequestValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditionList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRouterRequestValidationError{
				field:  "ConditionList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRouterRequestMultiError(errors)
	}

	return nil
}

// UpdateRouterRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRouterRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateRouterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRouterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRouterRequestMultiError) AllErrors() []error { return m }

// UpdateRouterRequestValidationError is the validation error returned by
// UpdateRouterRequest.Validate if the designated constraints aren't met.
type UpdateRouterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRouterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRouterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRouterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRouterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRouterRequestValidationError) ErrorName() string {
	return "UpdateRouterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRouterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRouterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRouterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRouterRequestValidationError{}

// Validate checks the field values on UpdateRouterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateRouterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRouterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRouterReplyMultiError, or nil if none found.
func (m *UpdateRouterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRouterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateRouterReplyMultiError(errors)
	}

	return nil
}

// UpdateRouterReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateRouterReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateRouterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRouterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRouterReplyMultiError) AllErrors() []error { return m }

// UpdateRouterReplyValidationError is the validation error returned by
// UpdateRouterReply.Validate if the designated constraints aren't met.
type UpdateRouterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRouterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRouterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRouterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRouterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRouterReplyValidationError) ErrorName() string {
	return "UpdateRouterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRouterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRouterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRouterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRouterReplyValidationError{}

// Validate checks the field values on CreateRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateRouterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateRouterRequestMultiError, or nil if none found.
func (m *CreateRouterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRouterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetConditionList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateRouterRequestValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateRouterRequestValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditionList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateRouterRequestValidationError{
				field:  "ConditionList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateRouterRequestMultiError(errors)
	}

	return nil
}

// CreateRouterRequestMultiError is an error wrapping multiple validation
// errors returned by CreateRouterRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateRouterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRouterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRouterRequestMultiError) AllErrors() []error { return m }

// CreateRouterRequestValidationError is the validation error returned by
// CreateRouterRequest.Validate if the designated constraints aren't met.
type CreateRouterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRouterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRouterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRouterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRouterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRouterRequestValidationError) ErrorName() string {
	return "CreateRouterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRouterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRouterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRouterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRouterRequestValidationError{}

// Validate checks the field values on GetRouterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetRouterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRouterRequestMultiError, or nil if none found.
func (m *GetRouterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRouterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetRouterRequestMultiError(errors)
	}

	return nil
}

// GetRouterRequestMultiError is an error wrapping multiple validation errors
// returned by GetRouterRequest.ValidateAll() if the designated constraints
// aren't met.
type GetRouterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRouterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRouterRequestMultiError) AllErrors() []error { return m }

// GetRouterRequestValidationError is the validation error returned by
// GetRouterRequest.Validate if the designated constraints aren't met.
type GetRouterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRouterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRouterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRouterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRouterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRouterRequestValidationError) ErrorName() string { return "GetRouterRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetRouterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRouterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRouterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRouterRequestValidationError{}

// Validate checks the field values on ListRouterRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRouterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRouterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRouterRequestMultiError, or nil if none found.
func (m *ListRouterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRouterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageNum

	// no validation rules for Order

	// no validation rules for SearchText

	// no validation rules for SearchField

	// no validation rules for Field

	// no validation rules for Cache

	if all {
		switch v := interface{}(m.GetFilterMap()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRouterRequestValidationError{
					field:  "FilterMap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRouterRequestValidationError{
					field:  "FilterMap",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilterMap()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRouterRequestValidationError{
				field:  "FilterMap",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListRouterRequestMultiError(errors)
	}

	return nil
}

// ListRouterRequestMultiError is an error wrapping multiple validation errors
// returned by ListRouterRequest.ValidateAll() if the designated constraints
// aren't met.
type ListRouterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRouterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRouterRequestMultiError) AllErrors() []error { return m }

// ListRouterRequestValidationError is the validation error returned by
// ListRouterRequest.Validate if the designated constraints aren't met.
type ListRouterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRouterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRouterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRouterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRouterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRouterRequestValidationError) ErrorName() string {
	return "ListRouterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRouterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRouterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRouterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRouterRequestValidationError{}

// Validate checks the field values on ListRouterReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListRouterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRouterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListRouterReplyMultiError, or nil if none found.
func (m *ListRouterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRouterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRouterReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRouterReplyValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRouterReplyValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Count

	if len(errors) > 0 {
		return ListRouterReplyMultiError(errors)
	}

	return nil
}

// ListRouterReplyMultiError is an error wrapping multiple validation errors
// returned by ListRouterReply.ValidateAll() if the designated constraints
// aren't met.
type ListRouterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRouterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRouterReplyMultiError) AllErrors() []error { return m }

// ListRouterReplyValidationError is the validation error returned by
// ListRouterReply.Validate if the designated constraints aren't met.
type ListRouterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRouterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRouterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRouterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRouterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRouterReplyValidationError) ErrorName() string { return "ListRouterReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListRouterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRouterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRouterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRouterReplyValidationError{}

// Validate checks the field values on RouterDTO with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RouterDTO) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RouterDTO with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RouterDTOMultiError, or nil
// if none found.
func (m *RouterDTO) ValidateAll() error {
	return m.validate(true)
}

func (m *RouterDTO) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for CreatedBy

	// no validation rules for UpdatedBy

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Status

	// no validation rules for ChannelId

	if all {
		switch v := interface{}(m.GetConditionList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RouterDTOValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RouterDTOValidationError{
					field:  "ConditionList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConditionList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RouterDTOValidationError{
				field:  "ConditionList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RouterDTOMultiError(errors)
	}

	return nil
}

// RouterDTOMultiError is an error wrapping multiple validation errors returned
// by RouterDTO.ValidateAll() if the designated constraints aren't met.
type RouterDTOMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RouterDTOMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RouterDTOMultiError) AllErrors() []error { return m }

// RouterDTOValidationError is the validation error returned by
// RouterDTO.Validate if the designated constraints aren't met.
type RouterDTOValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RouterDTOValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RouterDTOValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RouterDTOValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RouterDTOValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RouterDTOValidationError) ErrorName() string { return "RouterDTOValidationError" }

// Error satisfies the builtin error interface
func (e RouterDTOValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRouterDTO.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RouterDTOValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RouterDTOValidationError{}
