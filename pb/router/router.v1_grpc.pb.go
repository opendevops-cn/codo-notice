// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: pb/router/router.v1.proto

package router

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Router_ListRouter_FullMethodName        = "/ops.codo.notice.routers.v1.Router/ListRouter"
	Router_GetRouter_FullMethodName         = "/ops.codo.notice.routers.v1.Router/GetRouter"
	Router_CreateRouter_FullMethodName      = "/ops.codo.notice.routers.v1.Router/CreateRouter"
	Router_UpdateRouter_FullMethodName      = "/ops.codo.notice.routers.v1.Router/UpdateRouter"
	Router_UpdateRouterBatch_FullMethodName = "/ops.codo.notice.routers.v1.Router/UpdateRouterBatch"
	Router_DeleteRouter_FullMethodName      = "/ops.codo.notice.routers.v1.Router/DeleteRouter"
	Router_AlertRouterPOST_FullMethodName   = "/ops.codo.notice.routers.v1.Router/AlertRouterPOST"
	Router_AlertRouterGET_FullMethodName    = "/ops.codo.notice.routers.v1.Router/AlertRouterGET"
)

// RouterClient is the client API for Router service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouterClient interface {
	ListRouter(ctx context.Context, in *ListRouterRequest, opts ...grpc.CallOption) (*ListRouterReply, error)
	GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*RouterDTO, error)
	CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...grpc.CallOption) (*RouterDTO, error)
	UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...grpc.CallOption) (*UpdateRouterReply, error)
	UpdateRouterBatch(ctx context.Context, in *UpdateRouterBatchRequest, opts ...grpc.CallOption) (*UpdateRouterBatchReply, error)
	DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*DeleteRouterReply, error)
	AlertRouterPOST(ctx context.Context, in *AlertRouterRequest, opts ...grpc.CallOption) (*AlertRouterReply, error)
	AlertRouterGET(ctx context.Context, in *AlertRouterRequest, opts ...grpc.CallOption) (*AlertRouterReply, error)
}

type routerClient struct {
	cc grpc.ClientConnInterface
}

func NewRouterClient(cc grpc.ClientConnInterface) RouterClient {
	return &routerClient{cc}
}

func (c *routerClient) ListRouter(ctx context.Context, in *ListRouterRequest, opts ...grpc.CallOption) (*ListRouterReply, error) {
	out := new(ListRouterReply)
	err := c.cc.Invoke(ctx, Router_ListRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*RouterDTO, error) {
	out := new(RouterDTO)
	err := c.cc.Invoke(ctx, Router_GetRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) CreateRouter(ctx context.Context, in *CreateRouterRequest, opts ...grpc.CallOption) (*RouterDTO, error) {
	out := new(RouterDTO)
	err := c.cc.Invoke(ctx, Router_CreateRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...grpc.CallOption) (*UpdateRouterReply, error) {
	out := new(UpdateRouterReply)
	err := c.cc.Invoke(ctx, Router_UpdateRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) UpdateRouterBatch(ctx context.Context, in *UpdateRouterBatchRequest, opts ...grpc.CallOption) (*UpdateRouterBatchReply, error) {
	out := new(UpdateRouterBatchReply)
	err := c.cc.Invoke(ctx, Router_UpdateRouterBatch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*DeleteRouterReply, error) {
	out := new(DeleteRouterReply)
	err := c.cc.Invoke(ctx, Router_DeleteRouter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) AlertRouterPOST(ctx context.Context, in *AlertRouterRequest, opts ...grpc.CallOption) (*AlertRouterReply, error) {
	out := new(AlertRouterReply)
	err := c.cc.Invoke(ctx, Router_AlertRouterPOST_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routerClient) AlertRouterGET(ctx context.Context, in *AlertRouterRequest, opts ...grpc.CallOption) (*AlertRouterReply, error) {
	out := new(AlertRouterReply)
	err := c.cc.Invoke(ctx, Router_AlertRouterGET_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouterServer is the server API for Router service.
// All implementations must embed UnimplementedRouterServer
// for forward compatibility
type RouterServer interface {
	ListRouter(context.Context, *ListRouterRequest) (*ListRouterReply, error)
	GetRouter(context.Context, *GetRouterRequest) (*RouterDTO, error)
	CreateRouter(context.Context, *CreateRouterRequest) (*RouterDTO, error)
	UpdateRouter(context.Context, *UpdateRouterRequest) (*UpdateRouterReply, error)
	UpdateRouterBatch(context.Context, *UpdateRouterBatchRequest) (*UpdateRouterBatchReply, error)
	DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterReply, error)
	AlertRouterPOST(context.Context, *AlertRouterRequest) (*AlertRouterReply, error)
	AlertRouterGET(context.Context, *AlertRouterRequest) (*AlertRouterReply, error)
	mustEmbedUnimplementedRouterServer()
}

// UnimplementedRouterServer must be embedded to have forward compatible implementations.
type UnimplementedRouterServer struct {
}

func (UnimplementedRouterServer) ListRouter(context.Context, *ListRouterRequest) (*ListRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRouter not implemented")
}
func (UnimplementedRouterServer) GetRouter(context.Context, *GetRouterRequest) (*RouterDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (UnimplementedRouterServer) CreateRouter(context.Context, *CreateRouterRequest) (*RouterDTO, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRouter not implemented")
}
func (UnimplementedRouterServer) UpdateRouter(context.Context, *UpdateRouterRequest) (*UpdateRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouter not implemented")
}
func (UnimplementedRouterServer) UpdateRouterBatch(context.Context, *UpdateRouterBatchRequest) (*UpdateRouterBatchReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouterBatch not implemented")
}
func (UnimplementedRouterServer) DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouter not implemented")
}
func (UnimplementedRouterServer) AlertRouterPOST(context.Context, *AlertRouterRequest) (*AlertRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertRouterPOST not implemented")
}
func (UnimplementedRouterServer) AlertRouterGET(context.Context, *AlertRouterRequest) (*AlertRouterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlertRouterGET not implemented")
}
func (UnimplementedRouterServer) mustEmbedUnimplementedRouterServer() {}

// UnsafeRouterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouterServer will
// result in compilation errors.
type UnsafeRouterServer interface {
	mustEmbedUnimplementedRouterServer()
}

func RegisterRouterServer(s grpc.ServiceRegistrar, srv RouterServer) {
	s.RegisterService(&Router_ServiceDesc, srv)
}

func _Router_ListRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).ListRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_ListRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).ListRouter(ctx, req.(*ListRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_GetRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).GetRouter(ctx, req.(*GetRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_CreateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).CreateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_CreateRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).CreateRouter(ctx, req.(*CreateRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_UpdateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).UpdateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_UpdateRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).UpdateRouter(ctx, req.(*UpdateRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_UpdateRouterBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouterBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).UpdateRouterBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_UpdateRouterBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).UpdateRouterBatch(ctx, req.(*UpdateRouterBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_DeleteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).DeleteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_DeleteRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).DeleteRouter(ctx, req.(*DeleteRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_AlertRouterPOST_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).AlertRouterPOST(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_AlertRouterPOST_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).AlertRouterPOST(ctx, req.(*AlertRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Router_AlertRouterGET_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlertRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouterServer).AlertRouterGET(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Router_AlertRouterGET_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouterServer).AlertRouterGET(ctx, req.(*AlertRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Router_ServiceDesc is the grpc.ServiceDesc for Router service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Router_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ops.codo.notice.routers.v1.Router",
	HandlerType: (*RouterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRouter",
			Handler:    _Router_ListRouter_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _Router_GetRouter_Handler,
		},
		{
			MethodName: "CreateRouter",
			Handler:    _Router_CreateRouter_Handler,
		},
		{
			MethodName: "UpdateRouter",
			Handler:    _Router_UpdateRouter_Handler,
		},
		{
			MethodName: "UpdateRouterBatch",
			Handler:    _Router_UpdateRouterBatch_Handler,
		},
		{
			MethodName: "DeleteRouter",
			Handler:    _Router_DeleteRouter_Handler,
		},
		{
			MethodName: "AlertRouterPOST",
			Handler:    _Router_AlertRouterPOST_Handler,
		},
		{
			MethodName: "AlertRouterGET",
			Handler:    _Router_AlertRouterGET_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/router/router.v1.proto",
}
